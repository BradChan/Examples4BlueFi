==========================
4.2 列表
==========================

列表、字符串和元组都属于数组结构中的序列这一类，而列表区别于字符串和元组的地方在于，列表是可修改的，而字符串和元组不可修改。

与字符串的操作类似，列表同样可以完成索引、切片等的操作。

.. code-block::  C
  :linenos:

  >>> li = [1, 2 ,3]
  >>> li
  [1, 2, 3]

  >>> li[0]
  1
  >>> li[0:2]
  [1, 2]
  >>> li[0:3]
  [1, 2, 3]

  >>> other_li = [4, 5, 6]
  >>> li + other_li
  [1, 2, 3, 4, 5, 6]

是不是与字符串的操作类似？但接下来的程序只能由列表来完成。

.. code-block::  C
  :linenos:

  >>> li[0] = 2
  >>> li
  [2, 2, 3, 4]

列表li的第一个元素被修改为了2，让我们看看字符串是否可以被修改。

.. code-block::  C
  :linenos:

  >>> "1234"[0] = 2
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  TypeError: 'str' object does not support item assignment

显然，根据Python解释器的返回信息，字符串不支持修改操作。

列表能支持的操作远不止上述这些，但在介绍之前，我们需事先了解一个新的概念——方法，它与对象息息相关，
对象可以是列表、字符串或其他类型的对象。其格式为：
    对象.方法(入口参数)

方法的使用方式与函数类似，都是实现本身定义的功能。例如之前用到的print函数，用来将数据以字符串的形式打印到屏幕上；format函数，
将输入的数据格式化为字符串类型。Python解释器对于列表自带了几个方法用来对列表中的数据进行修改和查询。

或许你已经对枯燥的代码感到无趣，接下来，我会借助BlueFi来对列表的各个方法进行介绍。在本节中，我们无需了解BlueFi每行代码的含义，
只需观察列表数据与RGB灯珠的对应关系即可，至于其实现的原理会在第五章“使用Python控制BlueFi”中介绍。

append

pop

del

insert

extend

index


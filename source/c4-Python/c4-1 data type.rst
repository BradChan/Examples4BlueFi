====================
4.1 数值类型及运算符
====================

让我们开始Python的学习吧，在本小节中，会从基本的数值类型以及运算符出发，以几行简单的代码为大家介绍Python语言学习的基础内容。
如果有C语言的基础，相信大家能轻松理解Python语言的编程格式。

4.1.1 算术运算符
=================

对于四则运算中的+、-、×，在Python(无论是Python2.x还是Python3.x)中的计算规则与我们日常生活中的使用方法一致。

.. code-block::  C
  :linenos:

  >>> 1 + 2
  3
  >>> 1 - 2
  -1
  >>> 1 * 2
  2

其中的数字“1、2”被称为操作数，“+、-、×”被称为算术运算符。

而对于除法，则有整除和普通的除法两种，并且在Python2.x和Python3.x中，除号“/”的运算结果也不完全相同。

在Python3.x中，其除法运算满足下列的规律：

.. code-block::  C
  :linenos:

  >>> 1 / 2   
  0.5

  >>> 2 / 2
  1.0
  >>> 2.0 / 2.0
  1.0
  >>> 2.0 / 2
  1.0

  >>> 1 / 3
  0.3333333333333333

从上面的除法结果中发现了什么？无论操作数的类型是整数还是浮点数，Python3.x都会返回浮点数结果。

而在Python2.x中，进行除法“/”运算时，如果两个操作数都为整数，计算结果只保留整数部分，只有当两个操作数中至少有一个浮点数时，
才会返回浮点数类型的精确结果。

.. code-block::  C
  :linenos:

  >>> 1 / 2   
  0

  >>> 1.0 / 2
  0.5
  >>> 1.0 / 2.0
  0.5
  >>> 1 / 2.0
  0.5

  >>> 1 / 3
  0.3333333333333333

在Python2.x中可以通过导入“division” 模块来保持与Python 3.x一致的除法运算。

.. code-block::  C
  :linenos:

  >>> from __future__ import division
  >>> 1 / 2
  0.5

对于整除“//”，Python2.x与Python3.x一样，保留运算结果中的整数部分，如果操作数中有浮点数类型的数值，则计算结果为浮点数类型，小数部分为0。

.. code-block::  C
  :linenos:

  >>> 5 // 2
  2

  >>> 5.0 // 2
  2.0
  >>> 5 // 2.0
  2.0
  >>> 5.0 // 2.0
  2.0

  >>> 1.6 // 0.3
  5.0

在介绍完基本的四则运算后，还有两个相当重要的计算符号——取余“%”和幂“**”。

.. code-block::  C
  :linenos:

  >>> 5 % 2
  1
  >>> 5.0 % 2
  1.0
  
  >>> 2 ** 4
  16
  >>> 2.0 ** 4
  16.0

取余操作在编程项目中经常被使用，比如想得到x上各个位(个位、十位、百位等)的数值，可以通过对x进行取余、整除的方式获得；
又或者是定时操作，当前时长对定时时长取余，通过判断结果是否为零作为判断条件。

4.1.2 布尔类型与比较运算符
==========================

在Python中共有两种布尔类型的值，分别为True(真)和False(假)，它们的值分别等价于1和0，且能进行数值计算。

.. code-block::  C
  :linenos:

  >>> True + 1
  2
  >>> True + 1.2
  2.2

  >>> False + 1
  1
  >>> False + 1.2
  1.2

在使用True和False进行数值计算时，需注意单词的大小写，否则Python解释器无法识别该常量，将发生以下的情况：

.. code-block::  C
  :linenos:

  >>> true + 1
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  NameError: name 'true' is not defined

布尔类型常常被用于If、For、While等判断或循环语句中作为判断或循环中断的标志位，其中，不免伴随着数值比较的过程，
这就要用到比较运算符“<、>、==、>=...”。

.. code-block::  C
  :linenos:

  >>> 1 > 2
  False
  >>> 1 < 2
  True
  >>> 1 == 2
  False
  >>> 1 >= 2
  False
  >>> 1 <= 2
  True

可以看到，比较运算符的返回值为布尔类型，这在If、For、While等语句中很有用处。

4.1.3 逻辑运算符
==========================

介绍完了算数运算符和比较运算符后，还有最后一种运算符叫做逻辑运算符——and、or、not，它是用来判断操作数是否为零的。

.. code-block::  C
  :linenos:

  >>> True and False
  False
  >>> True or False
  True

  >>> not True
  False
  >>> not False
  True

在使用逻辑运算符时，操作数与运算符之间需用空格隔开，否则Python解释器无法正确识别该语句。
在and判断中，两个操作数中有一个为假，则返回值为False；在or中，有一个为真，则返回真；not是将当前的值对应的布尔值取反。

逻辑运算符的操作数可以用整数或浮点数代替么？当然可以。

.. code-block::  C
  :linenos:

  >>> 1 and 2
  2
  >>> 2.0 and 1
  1
  >>> 1 and 0
  0
  

  >>> 1 or 2
  1
  >>> 2.0 or 1
  2.0
  >>> 1 or 0
  1

  >>> not 1
  False
  >>> not -1
  False
  >>> not 2.0
  False
  >>> not 0
  True

仔细观察程序，可以发现：
  and 从左到右，若所有值均为真，则返回后一个值，有一个假的值，则返回第一个假的值；
  or 从左到右，返回遇到的第一个判断为真的值；
  not 所有的非零数值的返回值为False，而0则返回True。
显然，在逻辑运算符的判断中，Python解释器将所有的非零数值都当作是True，把0当作是False。

4.1.4 整数
=============

在Python3.x中，无论整数数值的大小，整数只有一种类型——长整数，而在Python2.x中，整数的类型被分为int(32位整数)和long int(长整数)。
长整数不受位数的限制，可以扩展到可用内存的最大值。

.. code-block::  C
  :linenos:

  >>> 10000000000    #Python3.x版本
  10000000000 

  >>> 10000000000    #Python2.2以后的版本
  10000000000L       #长整数型数字后缀加“L”

我们可以发现，在Python2.x中以后缀L来区分整数和长整数，而在Python3.x中则取消了这种区分。这里需要注意的是，在Python2.2之前的版本中，
不支持整数与长整数的自动切换。

.. code-block::  C
  :linenos:

  >>> 10000000000    #Python2.2以前的版本不会对整数类型进行自动转换
  OverFlowError:integer literal too large

  >>> 10000000000L   #需手动在大数后添加L
  10000000000L     

4.1.5 字符串
==============



4.1.6 变量
==============




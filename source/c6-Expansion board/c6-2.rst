======================
6.2 机器人扩展板 
======================

机器人扩展板，顾名思义，就是用来驱动机器人的扩展板。而控制机器人运动的部件是各种电机(步进电机、舵机等)，因此，
机器人扩展板实际上驱动的是各种电机。

机器人扩展板与上一节中的扩展板最大的不同之处在于机器人扩展板上提供各种电机的驱动模块和接口，下面以RobotBit(V2.2)扩展板为例，
对该扩展板上的步进电机接口和舵机接口的使用做相应介绍。下图是RobotBit(V2.2)扩展板的实物图：

.. image:: ../_static/images/c6/Robot_bit.png
  :scale: 32%
  :align: center

图6-2 RobotBit

6.2.1 驱动步进电机
=======================

由于RobotBit扩展板允许的最大电压为5V，因此，在选择步进电机时，步进电机的额定工作电压应在5V。在本小节中，我们使用的是28BYJ-48步进电机，
它是一个在5V直流电条件下正常工作的步进电机，满足我们的要求。

.. image:: ../_static/images/c6/28BYJ-48步进电机.png
  :scale: 35%
  :align: center

图6-3 28BYJ-48步进电机

在上图中除了步进电机之外，还有一个部件叫步进电机驱动板，它常常与步进电机配套使用。如果只使用BlueFi上IO引脚的输出电平来驱动步进电机，
会因为电压和电流过小而无法驱动电机，因此，需要一个驱动板提高输出功率来辅助驱动步进电机。由于在RobotBit扩展板上自带有驱动电路，
我们无需再外接驱动板，只需将步进电机的5P接口与扩展板上的相应接口相连即可。通常步进电机五根线中的红线为电源正极输入端，
在连接时请注意连接方向不要接反。

在BlueFi的“lib”文件夹中带有专门控制RobotBit扩展板的模块——hiibot_robotbit.py(mpy)，如果没有，请自行在BlueFi开源库中下载。
将其在MU编辑器中打开，我们可以找到“RobotBit”类，在“RobotBit”类中存放着各种驱动电机的方法。
在下面的示例程序中，我们将使用“RobotBit”类中有关步进电机的方法来驱动步进电机：

.. code-block::  C
  :linenos:

  import time
  from hiibot_robotbit import RobotBit

  robotbit = RobotBit()
  robotbit.StepperDegree(2,90)

  time.sleep(3)

  robotbit.StepperTurn(2,1)

将上面的示例程序保存到BlueFi中之后，将BlueFi插在扩展板上。连接好步进电机和外接的5V电源，打开电源开关，
按下BlueFi的Reset按钮让BlueFi重新执行内部的主程序，观察步进电机的转动情况。你会发现步进电机先是转了90°，然后停止3s，最后又转动了1周(360°)。

除去程序开始部分的导入模块和实例化程序，控制步进电机转动的程序其实只有两行——第5行和第9行。
在第5行程序中调用了“RobotBit”类中的“StepperDegree(index,degree)”方法来控制步进电机的转角，该方法共有两个入口参数——index(步进电机序号)和degree(转角)。
index数值的选择取决于你连接的是RobotBit扩展板上的哪个步进电机驱动引脚(M1、M2)，在该示例程序中使用的是M2引脚，因此index的值为2。
而“degree”则代表我们设定的旋转角度，可正(顺时针旋转)可负(逆时针旋转)。

在第9行中调用了“StepperTurn(index,rounds)”方法，该方法的第一个入口参数依然为index，而第二个参数“rounds”代表步进电机旋转的周数，
在本例中是旋转1周。“StepperTurn(index,rounds)”方法其实就是把“StepperDegree(index,degree)”方法中的“degree”修改为了“rounds×360”，
本质上还是在设定电机的转动角度，我们可以在“RobotBit”类中“StepperTurn”方法的定义中直接看出。

.. code-block::  C
  :linenos:

  def StepperTurn(self, index, rounds):
      self.StepperDegree(index, rounds*360)

6.2.2 驱动舵机
========================



.. code-block::  C
  :linenos:

  import time
  import board
  import pulseio

  def setperiod(period):
      return int(period/20*65535)

  motor_pwm = pulseio.PWMOut(board.P8,frequency = 50,duty_cycle = setperiod(1))
  time.sleep(0.1)

.. image:: ../_static/images/c6/MG90S舵机.png
  :scale: 35%
  :align: center

图6-4 MG90S舵机

.. code-block::  C
  :linenos:

  import time
  from hiibot_robotbit import RobotBit

  robotbit = RobotBit()
  robotbit.Servo(1,180)











